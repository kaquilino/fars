{
    "contents" : "#' Read FARS Data \n#'\n#' Reads a Fatality Analysis Reporting System (FARS) file in csv format and creates a dplyr tbl_df from it.\n#'  \n#' @param filename A character string giving the name of the file to read. \n#' \n#' @return This function returns a \\code{dplyr::tbl_df} of the file.\n#' \n#' @importFrom readr read_csv\n#' @importFrom dplyr tbl_df\n#' \n#' @note If the file or permission to it does not exist, an error is produced.\n#' \n#' @examples\n#' test_data <- system.file(\"extdata\", \"accident_2013.csv.bz2\", package = \"fars\")\n#' fars_read(filename=test_data)\n#' \n#' @references \\url{https://www.nhtsa.gov/research-data/fatality-analysis-reporting-system-fars}\n#' \n#' @export\nfars_read <- function(filename) {\n        if(!file.exists(filename))\n                stop(\"file '\", filename, \"' does not exist\")\n        data <- suppressMessages({\n                readr::read_csv(filename, progress = FALSE)\n        })\n        dplyr::tbl_df(data)\n}\n\n#' Generate FARS Filename\n#'\n#' Generates a standard Fatality Analysis Reporting System (FARS) filename for the year provided.\n#'  \n#' @param year A 4 digit year, coerced to integer.\n#' \n#' @return This function returns a FARS filename in character string format.\n#' \n#' @note If the year cannot be coerced to integer, NA is used.\n#' \n#' @examples\n#' make_filename('2013')\n#' \n#' @references \\url{https://www.nhtsa.gov/research-data/fatality-analysis-reporting-system-fars}\n#' \n#' @export\nmake_filename <- function(year) {\n        year <- as.integer(year)\n        sprintf(\"accident_%d.csv.bz2\", year)\n}\n\n#' Read FARS Data for One or More Years\n#'\n#' Reads a series of Fatality Analysis Reporting System (FARS) files and returns a dplyr tbl_df of the month and year columns for each file.\n#'  \n#' @param years A vector of 4 digit years, coerced to integers. \n#' \n#' @return This function returns a \\code{dplyr::tbl_df} with month and year columns.\n#' \n#' @importFrom dplyr mutate select\n#' \n#' @note If the file for a specified year, or permission to it, does not exist, an error is produced.\n#' \n#' @examples\n#' fars_read_years(2003:2015)\n#' \n#' @references \\url{https://www.nhtsa.gov/research-data/fatality-analysis-reporting-system-fars}\n#' \n#' @export\nfars_read_years <- function(years) {\n        lapply(years, function(year) {\n                file <- make_filename(year)\n                tryCatch({\n                        dat <- fars_read(file)\n                        dplyr::mutate(dat, year = year) %>% \n                                dplyr::select(MONTH, year)\n                }, error = function(e) {\n                        warning(\"invalid year: \", year)\n                        return(NULL)\n                })\n        })\n}\n\n#' Summarize FARS Data for One or More Years\n#'\n#' Reads a series of Fatality Analysis Reporting System (FARS) files and returns a frequency table of fatal crashes by month and year.\n#'  \n#' @inheritParams fars_read_years\n#' \n#' @return This function returns a data frame of the fatality crash frequency by month (row) and year (column).\n#' \n#' @importFrom dplyr group_by summarize bind_rows\n#' @importFrom tidyr spread\n#' \n#' @note If the file for a specified year, or permission to it, does not exist, an error is produced.\n#' \n#' @examples\n#' fars_summarize_years(2003:2015)\n#' \n#' @references \\url{https://www.nhtsa.gov/research-data/fatality-analysis-reporting-system-fars}\n#' \n#' @export\nfars_summarize_years <- function(years) {\n        dat_list <- fars_read_years(years)\n        dplyr::bind_rows(dat_list) %>% \n                dplyr::group_by(year, MONTH) %>% \n                dplyr::summarize(n = n()) %>%\n                tidyr::spread(year, n)\n}\n\n#' Map FARS Crash Fatalities\n#'\n#' Reads a Fatality Analysis Reporting System (FARS) file and plots a map of fatal crashes.\n#'  \n#' @param state.num Two digit FARS state reference number.   \n#' @param year Two digit year, coerced to integer. \n#'   \n#' @return This function returns a list of \\code{x}, \\code{y}, \\code{range} and \\code{names} components which can be used for successive calls to map and functions. A plot is made of the fatal crashes on a map of the state.\n#' \n#' @importFrom dplyr filter\n#' @importFrom maps map\n#' @importFrom graphics points\n#' \n#' @note If the \\code{state.num} provided is not in the FARS file, an error is produced. \n#' @note If there are no fatal crashes for the state and year, a message is provided.\n#' @note LONGITUD values > 900 are set to NA, LATITUDE values > 90 are set to NA\n#' \n#' @examples\n#' fars_map_state('01','2014')\n#' \n#' @references \n#' FARS data: \\url{https://www.nhtsa.gov/research-data/fatality-analysis-reporting-system-fars};\n#' State reference numbers: \\url{https://crashstats.nhtsa.dot.gov/Api/Public/Publication/812296}\n#' \n#' @export\nfars_map_state <- function(state.num, year) {\n        filename <- make_filename(year)\n        data <- fars_read(filename)\n        state.num <- as.integer(state.num)\n\n        if(!(state.num %in% unique(data$STATE)))\n                stop(\"invalid STATE number: \", state.num)\n        data.sub <- dplyr::filter(data, STATE == state.num)\n        if(nrow(data.sub) == 0L) {\n                message(\"no accidents to plot\")\n                return(invisible(NULL))\n        }\n        is.na(data.sub$LONGITUD) <- data.sub$LONGITUD > 900\n        is.na(data.sub$LATITUDE) <- data.sub$LATITUDE > 90\n        with(data.sub, {\n                maps::map(\"state\", ylim = range(LATITUDE, na.rm = TRUE),\n                          xlim = range(LONGITUD, na.rm = TRUE))\n                graphics::points(LONGITUD, LATITUDE, pch = 46)\n        })\n}\n",
    "created" : 1489623944190.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "171752344",
    "id" : "FDF0B77D",
    "lastKnownWriteTime" : 1489623956,
    "path" : "~/Class/R Packages/fars/R/fars_functions.R",
    "project_path" : "R/fars_functions.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}