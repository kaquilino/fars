cwd <- getwd()
cwd
cwd <- getwd()
setwd("Class/Advanced R/")
## Read in the data
library(readr)
library(magrittr)
source("oop_code.R")
## Load any other packages that you may need to execute your code
library(dplyr)
library(tidyr)
library(purrr)
data <- read_csv("data/MIE.csv")
x <- make_LD(data)
print(class(x))
print(x)
## Subject 10 doesn't exist
out <- subject(x, 10)
print(out)
out <- subject(x, 14)
print(out)
out <- subject(x, 54) %>% summary
print(out)
out <- subject(x, 14) %>% summary
print(out)
out <- subject(x, 44) %>% visit(0) %>% room("bedroom")
print(out)
## Show a summary of the pollutant values
out <- subject(x, 44) %>% visit(0) %>% room("bedroom") %>% summary
print(out)
out <- subject(x, 44) %>% visit(1) %>% room("living room") %>% summary
print(out)
setwd(cwd)
data <- read_csv("data/MIE.csv")
cwd <- getwd()
setwd("Class/Advanced R/")
library(readr)
library(magrittr)
source("oop_code.R")
## Load any other packages that you may need to execute your code
library(dplyr)
library(tidyr)
library(purrr)
data <- read_csv("data/MIE.csv")
x <- make_LD(data)
class(data)
colnames(data)
source("oop_code.R")
x <- make_LD(data)
source("oop_code.R")
length(colnames(data))
every(colnames(data) %in% c("id","visit","room","value","timepoint"))
colnames(data) %in% c("id","visit","room","value","timepoint")
source("oop_code.R")
x <- make_LD(data)
colnames(data)
new("LongitudinalData",
id = data$id,
visit = data$visit,
room = data$room,
value = data$value,
timepoint = data$timepoint)
if (length(colnames(data)) & sum(colnames(data) %in% c("id","visit","room","value","timepoint") == 5)) {
new("LongitudinalData",
id = data$id,
visit = data$visit,
room = data$room,
value = data$value,
timepoint = data$timepoint)
}
else stop("Column(s) missing or name mismatch")
source("oop_code.R")
x <- make_LD(data)
length(colnames(data)) & sum(colnames(data) %in% c("id","visit","room","value","timepoint") == 5)
length(colnames(data))
source("oop_code.R")
x <- make_LD(data)
length(colnames(data)) == 5 & sum(colnames(data) %in% c("id","visit","room","value","timepoint") == 5)
sum(colnames(data) %in% c("id","visit","room","value","timepoint") == 5)
length(colnames(data)) == 5 & sum(colnames(data) %in% c("id","visit","room","value","timepoint")) == 5)
length(colnames(data)) == 5 & sum(colnames(data) %in% c("id","visit","room","value","timepoint") == 5)
sum(colnames(data) %in% c("id","visit","room","value","timepoint") == 5)
sum(colnames(data) %in% c("id","visit","room","value","timepoint")) == 5)
sum(colnames(data) %in% c("id","visit","room","value","timepoint")) == 5
length(colnames(data)) == 5 & sum(colnames(data) %in% c("id","visit","room","value","timepoint")) == 5
source("oop_code.R")
x <- make_LD(data)
print(class(x))
print(x)
## Subject 10 doesn't exist
out <- subject(x, 10)
print(out)
out <- subject(x, 14)
print(out)
out <- subject(x, 54) %>% summary
print(out)
out <- subject(x, 14) %>% summary
print(out)
out <- subject(x, 44) %>% visit(0) %>% room("bedroom")
print(out)
## Show a summary of the pollutant values
out <- subject(x, 44) %>% visit(0) %>% room("bedroom") %>% summary
print(out)
out <- subject(x, 44) %>% visit(1) %>% room("living room") %>% summary
print(out)
setwd(cwd)
setClass("subject",slots=list(id="numeric",data="LongitudinalData"))
setClass("visit",slots=list(id="numeric",visit="numeric",data="LongitudinalData"))
setClass("room",slots=list(id="numeric",visit="numeric",room="character",data="LongitudinalData"))
setGeneric("subject",function(data,n) {
standardGeneric("subject")
})
setMethod("subject",
c(data="LongitudinalData",n="numeric"),
function(data,n){
index <- data@id == n
if (any(index)) new("subject",id=n,data=LD_subset(data,index))
})
# Generic Function for Extracting Visit Specific Information
# Returns object of class 'visit'
setGeneric("visit",function(subj,n) {
standardGeneric("visit")
})
setMethod("visit",
c(subj="subject",n="numeric"),
function(subj,n){
index <- subj@data@visit == n
if (any(index)) new("visit",id=subj@id,visit=n,data=LD_subset(subj@data,index))
})
# Generic Function for Extracting Room Specific Information
# Returns object of class 'room'
setGeneric("room",function(vis,x) {
standardGeneric("room")
})
setMethod("room",
c(vis="visit",x="character"),
function(vis,x){
index <- vis@data@room == x
if (any(index)) new("room",id=vis@id,visit=vis@visit,room=x,data=LD_subset(vis@data,index))
})
subj
subject(x, 44) %>% visit(0)
subject(x, 44)
s <- subject(x,44)
s
str(s)
s@data@visit
s@data@visit == 0
subject(x, 44) %>% visit(0)
visit(s,0)
setGeneric("visit",function(subj,n) {
standardGeneric("visit")
})
setMethod("visit",
c(subj="subject",n="numeric"),
function(subj,n){
index <- subj@data@visit == n
if (any(index)) new("visit",id=subj@id,visit=n,data=LD_subset(subj@data,index))
})
visit(s,0)
isS4(visit)
showMethods(visit)
cwd <- getwd()
setwd("Class/Advanced R/")
## Read in the data
library(readr)
library(magrittr)
source("oop_code.R")
## Load any other packages that you may need to execute your code
library(dplyr)
library(tidyr)
library(purrr)
data <- read_csv("data/MIE.csv")
x <- make_LD(data)
print(class(x))
print(x)
## Subject 10 doesn't exist
out <- subject(x, 10)
print(out)
out <- subject(x, 14)
print(out)
out <- subject(x, 54) %>% summary
print(out)
out <- subject(x, 14) %>% summary
print(out)
out <- subject(x, 44) %>% visit(0) %>% room("bedroom")
print(out)
## Show a summary of the pollutant values
out <- subject(x, 44) %>% visit(0) %>% room("bedroom") %>% summary
print(out)
out <- subject(x, 44) %>% visit(1) %>% room("living room") %>% summary
print(out)
setwd(cwd)
cwd <- getwd()
setwd("Class/Advanced R/")
## Read in the data
library(readr)
library(magrittr)
source("oop_code.R")
## Load any other packages that you may need to execute your code
library(dplyr)
library(tidyr)
library(purrr)
sink("oop_output.txt")
data <- read_csv("data/MIE.csv")
x <- make_LD(data)
print(class(x))
print(x)
## Subject 10 doesn't exist
out <- subject(x, 10)
print(out)
out <- subject(x, 14)
print(out)
out <- subject(x, 54) %>% summary
print(out)
out <- subject(x, 14) %>% summary
print(out)
out <- subject(x, 44) %>% visit(0) %>% room("bedroom")
print(out)
## Show a summary of the pollutant values
out <- subject(x, 44) %>% visit(0) %>% room("bedroom") %>% summary
print(out)
out <- subject(x, 44) %>% visit(1) %>% room("living room") %>% summary
print(out)
sink()
setwd(cwd)
cwd <- getwd()
setwd("Class/Advanced R/")
## Read in the data
library(readr)
library(magrittr)
source("oop_code.R")
## Load any other packages that you may need to execute your code
library(dplyr)
library(tidyr)
library(purrr)
data <- read_csv("data/MIE.csv")
x <- make_LD(data)
print(class(x))
print(x)
## Subject 10 doesn't exist
out <- subject(x, 10)
print(out)
out <- subject(x, 14)
print(out)
out <- subject(x, 54) %>% summary
print(out)
out <- subject(x, 14) %>% summary
print(out)
out <- subject(x, 44) %>% visit(0) %>% room("bedroom")
print(out)
## Show a summary of the pollutant values
out <- subject(x, 44) %>% visit(0) %>% room("bedroom") %>% summary
print(out)
out <- subject(x, 44) %>% visit(1) %>% room("living room") %>% summary
print(out)
setwd(cwd)
library(purrr)
library(microbenchmark)
# Temporarily reset working directory to store output
cwd <- getwd()
setwd("Class/Advanced R/")
# Loop
Factorial_loop <- function(n) {
stopifnot(n >= 0)
if (n>0) {
factorial <- 1
for (i in n:1) {
factorial <- factorial * i
}
}
else if (n==0) factorial <- 1
factorial
}
# Reduce
Factorial_reduce <- function(n) {
stopifnot(n >= 0)
if (n>0) reduce(n:1,prod)
else if (n==0) 1
}
# Recursion
Factorial_func <- function(n) {
stopifnot(n >= 0)
if (n>0) n * Factorial_func (n-1)
else if (n==0) 1
}
# Memoization
fact_table <- integer(length=0)
Factorial_mem <- function(n) {
stopifnot(n >= 0)
if (n==0) 1
else if(!is.na(fact_table[n])){
fact_table[n]
}
else {
fact_table[n] <<- n * Factorial_mem(n - 1)
fact_table[n]
}
}
# Verify Functions Produce Same Output
# map_dbl(0:11, Factorial_loop)
# map_dbl(0:11, Factorial_reduce)
# map_dbl(0:11, Factorial_func)
# map_dbl(0:11, Factorial_mem)
# Direct output to factorial_output.txt
sink("factorial_output.txt")
# Benchmark - Single Value
cat('Benchmark - Single Value\n')
microbenchmark(map_dbl(8, Factorial_loop),
map_dbl(8, Factorial_reduce),
map_dbl(8, Factorial_func),
map_dbl(8, Factorial_mem))
# Benchmark - Range of Values
cat('\nBenchmark - Range of Values\n')
microbenchmark(map_dbl(0:30, Factorial_loop),
map_dbl(0:30, Factorial_reduce),
map_dbl(0:30, Factorial_func),
map_dbl(0:30, Factorial_mem))
sink()
setwd(cwd)
seq(0,n-1)
seq(0,4)
install.packages("Rtools")
Reduce(prod,1:5)
Reduce(prod,1:10)
Reduce(prod,1:6)
Reduce('*',1:6)
Reduce('*',1:50)
reduce(1:6,prod)
reduce(1:50,prod)
Reduce('*',1:50,init=1)
Reduce('*',0:50,init=1)
Reduce('*',1:50,init=1)
install.packages("roxygen2")
library(roxygen2)
library(dplyr)
setwd("~/Class/R Packages")
library(devtools)
document()
setwd("~/Class/R Packages/fars")
document()
document()
document()
document()
document()
document()
document()
document()
document()
document()
library(shinydashboard)
library(shiny)
document()
getwd()
system.file("extdata", "fars_data.zip", package = "fars")
document()
example(fars_read)
test_data <- system.file("extdata", "fars_data.zip", package = "fars")
fars_read(filename=test_data)
test_data
fars_read(filename=test_data)
fars_read
library(dplyr)
fars_read
fars_read(filename=test_data)
t <- fars_read(filename=test_data)
t
read_csv(test_data)
readr::read_csv(test_data)
library(readr)
document()
document()
document()
document()
document()
document()
document()
document()
document()
document()
document()
document()
document()
document()
fars_read(filename=test_data)
test_data
test_data <- system.file("extdata", "fars_data.zip", "Data", package = "fars")
test_data
test_data <- system.file("extdata", "fars_data.zip", "data", package = "fars")
test_data
test_data <- system.file("extdata", "fars_data.zip", "data", "accident_2013.csv",package = "fars")
test_data
test_data <- system.file("extdata", "fars_data.zip", "data", "accident_2013.csv.bz2",package = "fars")
test_data
test_data <- system.file("extdata", "accident_2013.csv.bz2",package = "fars")
test_data
fars_read(filename=test_data)
document()
document()
document()
as.integer(2014)
as.integer('2014')
as.integer('2014a')
install.packages("testthat")
library(testthat)
make_filename <- function(year) {
year <- as.integer(year)
sprintf("accident_%d.csv.bz2", year)
}
expect_that(make_filename('2013',equals("accident_2013.csv.bz2"))
)
expect_that(make_filename('2013'),equals("accident_2013.csv.bz2"))
expect_that(make_filename('2013a'),equals("accident_2013.csv.bz2"))
expect_that(make_filename('2013a'),equals("accident_NA.csv.bz2"))
make_filename('2013')
fars_read <- function(filename) {
if(!file.exists(filename))
stop("file '", filename, "' does not exist")
data <- suppressMessages({
readr::read_csv(filename, progress = FALSE)
})
dplyr::tbl_df(data)
}
fars_read_years <- function(years) {
lapply(years, function(year) {
file <- make_filename(year)
tryCatch({
dat <- fars_read(file)
dplyr::mutate(dat, year = year) %>%
dplyr::select(MONTH, year)
}, error = function(e) {
warning("invalid year: ", year)
return(NULL)
})
})
}
fars_read_years(c(2013,2014))
make_filename('2013')
fars_read_years(c('2013','2014'))
fars_read(make_filename('2013'))
getwd()
file.path(getwd(),"inst","extdata")
setwd(file.path(getwd(),"inst","extdata"))
getwd()
fars_read(make_filename('2013'))
fars_read_years(c('2013','2014'))
fars_read_years(2013:2014)
fars_read_years(2013:2015)
document()
setwd(file.path("C","Users","kaquilin","Documents","Class","R Packages","fars"))
setwd(file.path("C:","Users","kaquilin","Documents","Class","R Packages","fars"))
getwd()
document()
fars_summarize_years <- function(years) {
dat_list <- fars_read_years(years)
dplyr::bind_rows(dat_list) %>%
dplyr::group_by(year, MONTH) %>%
dplyr::summarize(n = n()) %>%
tidyr::spread(year, n)
}
fars_map_state <- function(state.num, year) {
filename <- make_filename(year)
data <- fars_read(filename)
state.num <- as.integer(state.num)
if(!(state.num %in% unique(data$STATE)))
stop("invalid STATE number: ", state.num)
data.sub <- dplyr::filter(data, STATE == state.num)
if(nrow(data.sub) == 0L) {
message("no accidents to plot")
return(invisible(NULL))
}
is.na(data.sub$LONGITUD) <- data.sub$LONGITUD > 900
is.na(data.sub$LATITUDE) <- data.sub$LATITUDE > 90
with(data.sub, {
maps::map("state", ylim = range(LATITUDE, na.rm = TRUE),
xlim = range(LONGITUD, na.rm = TRUE))
graphics::points(LONGITUD, LATITUDE, pch = 46)
})
}
fars_summarize_years(2013:2104)
fars_summarize_years(2013:2014)
fars_summarize_years(2013:2014)
setwd(file.path(getwd(),"inst","extdata"))
fars_summarize_years(2013:2014)
fars_map_state(2013:2014)
fars_map_state('NY','2014')
fars_map_state('31','2014')
NA > 900
filename <- make_filename(2013)
data <- fars_read(filename)
is.na(data.sub$LONGITUDE)
is.na(data$LONGITUDE)
is.na(data$LONGITUD)
data$LONGITUD > 900
is.na(data$LONGITUD) <- data$LONGITUD > 900
data$LONGITUDE
data$LONGITUD
data <- fars_read(filename)
data$LONGITUD
fars_map_state('31','2014')
library(maps)
fars_map_state('31','2014')
fars_map_state('04','2014')
fars_map_state('09','2014')
fars_map_state('01','2014')
data[1:10]
setwd("~/Class/R Packages/fars")
document()
document()
document()
document()
setwd("~/Class/R Packages/fars")
