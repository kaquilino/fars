if(nrow(data.sub) == 0L) {
message("no accidents to plot")
return(invisible(NULL))
}
is.na(data.sub$LONGITUD) <- data.sub$LONGITUD > 900
is.na(data.sub$LATITUDE) <- data.sub$LATITUDE > 90
with(data.sub, {
maps::map("state", ylim = range(LATITUDE, na.rm = TRUE),
xlim = range(LONGITUD, na.rm = TRUE))
graphics::points(LONGITUD, LATITUDE, pch = 46)
})
}
library(fars)
library(fars,lib.loc = file.path("C:",""))
getwd()
library(fars,lib.loc = getwd())
dirname(getwd())
library(fars,lib.loc=dirname(getwd())
)
dirname(getwd())
library(fars,lib.loc=dirname(getwd()))
install.packages("fars")
install.packages("fars",repos=NULL)
install.packages("fars",repos=NULL,type=source)
install.packages("testthat")
load_all()
install_github("hadley/testthat")
library(testthat)
example(test_that)
test_that("missing file produces error",)
test_that("missing file produces error",{})
test_that("missing file produces error",{expect_error(fars_read("nonexistentfile.ext"))})
test_that("valid file produces tbl_df",{expect_is(fars_read("system.file("extdata","accident_2013.csv.bz2","packages="fars"))})
test_that("valid file produces tbl_df",{expect_is(fars_read(system.file("extdata","accident_2013.csv.bz2","packages="fars"))})
test_that("valid file produces tbldf",{expect_is(fars_read(system.file("extdata","accident_2013.csv.bz2","packages="fars"))})
test_that("valid file produces tbldf",{expect_is(fars_read(system.file("extdata","accident_2013.csv.bz2",packages="fars")))})
test_that("valid file produces tbldf",{expect_is(fars_read(system.file("extdata","accident_2013.csv.bz2",packages="fars"),class="tbl_df"))})
test_that("valid file produces tbl_df",{expect_is(fars_read(system.file("extdata","accident_2013.csv.bz2",packages="fars"),class="tbl_df"))})
test_that("valid file produces tbl_df",{expect_is(fars_read(system.file("extdata","accident_2013.csv.bz2",packages="fars")),class="tbl_df")})
test_that("valid file produces tbl_df",{expect_is(fars_read(system.file("extdata","accident_2013.csv.bz2",package="fars")),class="tbl_df")})
test_that("valid file produces tbl_df",{expect_is(fars_read(system.file("extdata","accident_2013.csv.bz2",package="fars")),class="tbl_df")})
test_that("missing file produces error",{expect_error(fars_read("nonexistentfile.ext"))})
test_that("valid file -> tbl_df",{expect_is(fars_read(system.file("extdata","accident_2013.csv.bz2",package="fars")),class="tbl_df")})
test_that("invalid file produces error",{expect_is(fars_read(system.file("extdata","invalid_file_for_testing.txt",package="fars")),class="tbl_df")})
test_that("invalid file produces error",{expect_error(fars_read(system.file("extdata","invalid_file_for_testing.txt",package="fars")),class="tbl_df")})
expect_that("valid year produces filename",make_filename('2014'),equals("accident_2014.csv.bz2",package="fars"))
expect_that("valid year produces filename",make_filename(2014),equals("accident_2014.csv.bz2")
)
make_filename(2014)
make_filename(2014) = "accident_2014.csv.bz2"
make_filename(2014) == "accident_2014.csv.bz2"
expect_that("valid year produces filename",make_filename(2014),equals("accident_2014.csv.bz2"))
library(condition)
make_filename <- function(year) {
year <- as.integer(year)
sprintf("accident_%d.csv.bz2", year)
}
expect_that("valid year produces filename",make_filename(2014),equals("accident_2014.csv.bz2"))
make_filename <- function(year) {
year <- as.integer(year)
sprintf("accident_%d.csv.bz2", year)
}
expect_that("valid year produces filename",make_filename(2014),equals("accident_2014.csv.bz2"))
make_filename(2014)
expect_that("make_filename(2014),equals("accident_2014.csv.bz2"))
expect_that("make_filename(2014),equals("accident_2014.csv.bz2"))
expect_that(make_filename(2014),equals("accident_2014.csv.bz2"))
expect_that(make_filename(TRUE),equals("accident_2014.csv.bz2"))
expect_that(fars_read(system.file("extdata","accident_2013.csv.bz2",package="fars"),is_a("tbl_df")))
expect_that(fars_read(system.file("extdata","accident_2013.csv.bz2",package="fars")),is_a("tbl_df"))
expect_that(fars_read("nonexistentfile.ext"),throws_error())
expect_that(make_filename(TRUE),equals("accident_2014.csv.bz2"))
expect_that(make_filename(2014),equals("accident_2014.csv.bz2"))
expect_that(make_filename('2014'),equals("accident_2014.csv.bz2"))
expect_that(make_filename(2015-2014),equals("accident_2014.csv.bz2"))
expect_that(make_filename(2015-1),equals("accident_2014.csv.bz2"))
expect_that(fars_read_years(2012-2013),is_a("tbl_df"))
expect_that(fars_read_years(2012:2013),is_a("tbl_df"))
expect_that(fars_read_years(2013:2015),is_a("tbl_df"))
expect_that(fars_read_years(2003:2015),is_a("tbl_df"))
expect_that(fars_read_years(2013:2015),is_a("tbl_df"))
fars_read_years(2013:2015)
make_filename(2014)
fars_read(make_filename(2014))
cwd <- getwd()
setwd(file.path(cwd,"inst","extdata"))
expect_that(fars_read_years(2013:2015),is_a("tbl_df"))
fars_read(make_filename(2014))
fars_read_years(2013:2014)
fars_read_years(2013:2015)
expect_that(fars_read_years(2013:2015),is_a("tbl_df"))
expect_that(fars_read_years(2013:2015),is_a("list"))
expect_that(fars_read_years(2013:2015),prints_text())
expect_that(fars_read_years(2013:2015)[[1]],is_a("tbl_df")
)
expect_that(fars_read_years(2012),gives_warning())
fars_read_years(c(2013,2014))
expect_that(fars_read_years(c(2013,2014)),is_a("list"))
expect_that(fars_read_years(2013,is_a("list"))
)
expect_that(fars_read_years(2013),is_a("list"))
expect_that(fars_read_years(2012),throws_error())
expect_that(fars_read_years(2012),equals(NULL))
expect_that(fars_read_years(2012),is_equivalent_to(NULL))
fars_read_years(2013:2015)
expect_that(fars_read_years(2013:2015),is_a("data.frame"))
expect_that(fars_read_years(2013:2015)[[1]],is_a("data.frame"))
expect_that(fars_read_years(2013:2015),is_a("list"))
expect_that(fars_summarize_years(2013:2015),is_a("list"))
expect_that(fars_summarize_years(2013:2015),is_a("tbl_df"))
fars_summarize_years(2013:2015)
expect_that(fars_summarize_years(2012),gives_warning())
fars_summarize_years(2012)
expect_that(fars_summarize_years(2012),throws_error())
expect_that(fars_summarize_years(2012),gives_warning())
expect_that(fars_summarize_years(2012),throws_error())
expect_that(fars_summarize_years(2012),shows_message())
expect_that(fars_summarize_years(2012),throws_error() & gives_warning())
expect_that(fars_summarize_years(2012),throws_error())
expect_that(fars_summarize_years(2012),gives_warning())
expect_that(fars_summarize_years(2013:2015),is_a("tbl_df"))
expect_that(fars_summarize_years(2012),throws_error())
expect_that(fars_read_years(2013:2015),is_a("list"))
expect_that(fars_read_years(2013:2015)[[1]],is_a("tbl_df"))
expect_that(fars_read_years(2012),gives_warning())
expect_that(fars_read_years(c(2013,2014)),is_a("list"))
expect_that(fars_read_years(2013),is_a("list"))
expect_that(fars_read_years(2013:2015)[[1]],is_a("tbl_df"))
# fars_read
expect_that(fars_read(system.file("extdata","accident_2013.csv.bz2",package="fars")),is_a("tbl_df"))
expect_that(fars_read("nonexistentfile.ext"),throws_error())
# make_filename
that_that("various argumpent types generate correct file name", {
expect_equal(make_filename(2014),"accident_2014.csv.bz2")
expect_equal(make_filename('2014'),"accident_2014.csv.bz2")
expect_equal(make_filename(2015-1),"accident_2014.csv.bz2")
})
# fars_read_years
test_that("various argumpent types generate correct file name", {
expect_equal(make_filename(2014),"accident_2014.csv.bz2")
expect_equal(make_filename('2014'),"accident_2014.csv.bz2")
expect_equal(make_filename(2015-1),"accident_2014.csv.bz2")
})
test_that("various argument values result in a list", {
expect_is(fars_read_years(2013:2015),"list")
expect_is(fars_read_years(c(2013,2014),"list")
expect_is(fars_read_years(2013),"list")
})
test_that("various argument values result in a list", {
expect_is(fars_read_years(2013:2015),"list")
expect_is(fars_read_years(c(2013,2014),"list")
expect_is(fars_read_years(2013),"list")
})
test_that("various argument values result in a list", {
expect_true(is.list(fars_read_years(2013:2015))
expect_is(fars_read_years(c(2013,2014),"list")
expect_is(fars_read_years(2013),"list")
})
test_that("various argument values result in a list", {
expect_true(is.list(fars_read_years(2013:2015))
expect_true(is.list(fars_read_years(c(2013,2014),"list"))
expect_true(is.list(fars_read_years(2013),"list"))
})
test_that("various argument values result in a list", {
expect_true(is.list(fars_read_years(2013:2015))
expect_true(is.list(fars_read_years(c(2013,2014)))
expect_true(is.list(fars_read_years(2013)))
})
expect_true(is.list(fars_read_years(2013:2013)))
test_that("various argument values result in a list", {
expect_true(is.list(fars_read_years(2013:2015))
expect_true(is.list(fars_read_years(c(2013,2014)))
expect_true(is.list(fars_read_years(2013:2013)))
})
test_that("various argument values result in a list", {
expect_true(is.list(fars_read_years(2013:2015))
expect_true(is.list(fars_read_years(c(2013,2014)))
expect_true(is.list(fars_read_years(2013:2014)))
})
test_that("various argument values result in a list", {
expect_true(is.list(fars_read_years(2013:2015)))
expect_true(is.list(fars_read_years(c(2013,2014)))
expect_true(is.list(fars_read_years(2013:2014)))
})
test_that("various argument values result in a list", {
expect_true(is.list(fars_read_years(2013:2015)))
expect_true(is.list(fars_read_years(c(2013,2014)))
expect_true(is.list(fars_read_years(2013)))
})
test_that("various argument values result in a list", {
expect_true(is.list(fars_read_years(2013:2015)))
expect_true(is.list(fars_read_years(c(2013,2014)))
expect_true(is.list(fars_read_years(2013)))
expect_true(is.list(fars_read_years(2013:2015)))
expect_true(is.list(fars_read_years(c(2013,2014)))
)
test_that("various argument values result in a list", {
expect_true(is.list(fars_read_years(2013:2015)))
expect_true(is.list(fars_read_years(c(2013,2014))))
expect_true(is.list(fars_read_years(2013)))
})
expect_that(fars_read_years(2013:2015)[[1]],is_a("tbl_df"))
expect_that(fars_read_years(2012),gives_warning())
expect_that(fars_summarize_years(2013:2015),is_a("tbl_df"))
expect_that(fars_summarize_years(2012),throws_error())
expect_that(fars_summarize_years(2012),gives_warning())
expect_that(fars_read_years(c(2013,2014)),is_a("list"))
expect_that(fars_read_years(2013),is_a("list"))
fars_summarize_years(2012)
expect_that(expect_that(fars_summarize_years(2012),throws_error()),gives_warning())
expect_that(expect_that(fars_summarize_years(2012),gives_warning()),throws_error())
expect_that(fars_read_years(2013),is_a("list"))
fars_summarize_years(2012)
fars_summarize_years(2013)
expect_output(str(mtcars), "32 obs")
str(mtcars)
fars_summarize_years(2013)
fars_summarize_years(2014)
expect_that(fars_summarize_years(c(2013,2014)),is_a("tbl_df"))
expect_that(fars_summarize_years(2013),is_a("tbl_df"))
test_that("various argument values result in a list", {
expect_true(is.list(fars_read_years(2013:2015)))
expect_true(is.list(fars_read_years(c(2013,2014))))
expect_true(is.list(fars_read_years(2013)))
})
data$STATE
fars_map_state('01','2014')
fars_map_state('02','2014')
fars_map_state('03','2014')
fars_map_state('04','2014')
fars_map_state('05','2014')
fars_map_state('AB','2014')
expect_that(fars_map_state('FL',2014),throse_error())
expect_that(fars_map_state('FL',2014),throws_error())
expect_that(expect_that(fars_map_state('FL',2014),throws_error()),gives_warning())
expect_that(expect_that(fars_map_state('1',2014),throws_error()),gives_warning())
fars_map_state('06','2014')
maps::map
fars_map_state <- function(state.num, year) {
filename <- make_filename(year)
data <- fars_read(filename)
state.num <- as.integer(state.num)
if(!(state.num %in% unique(data$STATE)))
stop("invalid STATE number: ", state.num)
data.sub <- dplyr::filter(data, STATE == state.num)
if(nrow(data.sub) == 0L) {
message("no accidents to plot")
return(invisible(NULL))
}
is.na(data.sub$LONGITUD) <- data.sub$LONGITUD > 900
is.na(data.sub$LATITUDE) <- data.sub$LATITUDE > 90
with(data.sub, {
maps::map("state", ylim = range(LATITUDE, na.rm = TRUE),
xlim = range(LONGITUD, na.rm = TRUE))
graphics::points(LONGITUD, LATITUDE, pch = 46)
})
}
data <- fars_read("accident_2014.csv.bz2")
data
fars_map_state('1','2014')
data
data[state==1]
data[data$state==1,]
fars_map_state('1','2014')
help(package==maps)
help(package=maps)
map('world',regions='uk')
map
library(maps)
fars_map_state('1','2014')
expect_that(fars_map_state('1','2014'),is.a("list"))
expect_that(fars_map_state('1','2014'),is_a("list"))
j <- fars_map_state('06','2014')
str(j)
j <- fars_map_state('1','2014')
str(j)
j <- fars_map_state('1','2015')
str(j)
j <- fars_map_state('2','2015')
j <- fars_map_state('3','2015')
expect_that(expect_that(fars_map_state('1',2014),throws_error()),gives_warning())
expect_that(fars_map_state('3',2014),throws_error())
help(package=testthat)
expect_is(fars_read(system.file("extdata","accident_2013.csv.bz2",package="fars")),"tbl_df")
expect_error(fars_read("nonexistentfile.ext"))
expect_is(fars_read_years(2013:2015)[[1]],"tbl_df")
expect_warning(fars_read_years(2012))
expect_is(fars_summarize_years(2013:2015),"tbl_df")
expect_warning(expect_error(fars_summarize_years(2012)))
expect_warning(expect_error(fars_summarize_years(2012)))
expect_error(expect_warning(fars_summarize_years(2012)))
expect_warning(expect_error(fars_map_state('FL',2014)))
expect_error(fars_map_state('3',2014))
expect_error(fars_map_state('4',2014))
fars_map_state('4',2014)
fars_map_state('5',2014)
fars_map_state('6',2014)
fars_map_state('7',2014)
fars_map_state('8',2014)
fars_map_state('9',2014)
fars_map_state('10',2014)
fars_map_state('11',2014)
fars_map_state('12',2014)
fars_map_state('13',2014)
fars_map_state('14',2014)
fars_map_state('15',2014)
fars_map_state('15',2014)
fars_map_state('16',2014)
fars_map_state('17',2014)
fars_map_state('17',2014)
fars_map_state('18',2014)
fars_map_state('19',2014)
fars_map_state('20',2014)
fars_map_state('21',2014)
fars_map_state('22',2014)
fars_map_state('23',2014)
fars_map_state('24',2014)
fars_map_state('26',2014)
fars_map_state('27',2014)
fars_map_state('28',2014)
fars_map_state('29',2014)
fars_map_state('30',2014)
fars_map_state('31',2014)
fars_map_state('32',2014)
fars_map_state('34',2014)
fars_map_state('35',2014)
fars_map_state('36',2014)
fars_map_state('37',2014)
unique(data$STATE)
t <-fars_map_state('1','2014')
t
t <-fars_map_state('1',2014)
t <-fars_map_state(1,2014)
fars_map_state(1,2014)
fars_map_state(2,2014)
fars_map_state(3,2014)
fars_map_state(4,2014)
fars_map_state(5,2014)
map::state
state
# fars_read
expect_is(fars_read(system.file("extdata","accident_2013.csv.bz2",package="fars")),"tbl_df")
expect_error(fars_read("nonexistentfile.ext"))
# make_filename
test_that("various argumpent types generate correct file name", {
expect_equal(make_filename(2014),"accident_2014.csv.bz2")
expect_equal(make_filename('2014'),"accident_2014.csv.bz2")
expect_equal(make_filename(2015-1),"accident_2014.csv.bz2")
})
# fars_read_years
test_that("various argument values result in a list", {
expect_true(is.list(fars_read_years(2013:2015)))
expect_true(is.list(fars_read_years(c(2013,2014))))
expect_true(is.list(fars_read_years(2013)))
})
expect_is(fars_read_years(2013:2015)[[1]],"tbl_df")
expect_warning(fars_read_years(2012))
# fars_summarize_years
expect_is(fars_summarize_years(2013:2015),"tbl_df")
expect_warning(expect_error(fars_summarize_years(2012)))
expect_error(expect_warning(fars_summarize_years(2012)))
expect_is(fars_summarize_years(c(2013,2014)),"tbl_df")
expect_is(fars_summarize_years(2013),"tbl_df")
# fars_map_state
expect_warning(expect_error(fars_map_state('FL',2014)))
expect_error(fars_map_state('3',2014))
make_filename(2014)
make_filename('2014')
make_filename(2015-1)
test_data <- system.file("extdata", "accident_2013.csv.bz2", package = "fars")
fars_read(filename=test_data)
test_data <- system.file("extdata", "accident_2013.csv.bz2", package = "fars")
fars_read(filename=test_data)
fars_read_years(2013:2015)
fars_read_years(2013)
fars_read_years(c(2013,2015)
)
fars_summarize_years(2013:2015)
fars_summarize_years(2013)
fars_map_state(1,2014)
fars_map_state(4,2015)
test_data <- system.file("extdata", "accident_2013.csv.bz2", package = "fars")
fars_read(filename=test_data)
library(fars)
library(fars)
library(fars)
library(fars)
library(fars)
library(fars)
document()
getwd()
dir(getwd())
dirpath(getwd())
dirname(getwd())
dirname(dirname(getwd()))
setwd("dirname(dirname(getwd()))")
setwd(dirname(dirname(getwd())))
getwd()
document()
library(fars)
fars_summarize_years(2013:2015)
devtools::load_all(".")
library(fars)
devtools::load_all(".")
find.package(fars)
find.package("fars")
path.package("fars")
library(fars)
library(fars)
document()
library(fars)
devtools::load_all(".")
document()
use_package("maps")
use_package("tidyr")
use_package("graphics")
use_package("readr")
search
search()
library(fars)
library(fars)
getwd()
library(fars)
library(fars)
library(devtools)
use_travis()
use_readme_rmd()
devtools::use_readme_rmd()
library("devtools", lib.loc="~/R/win-library/3.1")
install.packages("devtools")
library("devtools", lib.loc="~/R/win-library/3.1")
devtools::use_readme_rmd()
use_readme_md()
fn <- make_filename(2014)
fars_read(fn)
fars_read(system.file("extdata","accident_2013.csv.bz2"))
fars_read(system.file("extdata","accident_2013.csv.bz2",package="fars"))
build_vignettes()
build_vignettes()
install.packages(c("colorspace", "CORElearn", "data.table", "DBI", "e1071", "Ecdat", "Ecfun", "ElemStatLearn", "fields", "foreach", "forecast", "Formula", "gbm", "gdata", "ggvis", "googleVis", "gtable", "gtools", "HistData", "Hmisc", "iterators", "kernlab", "latticeExtra", "lubridate", "manipulate", "maps", "munsell", "NLP", "openNLP", "openNLPdata", "openxlsx", "pgmm", "plotly", "plyr", "quantmod", "quantreg", "R.methodsS3", "R.oo", "R.utils", "randomForest", "rattle", "RcppArmadillo", "RcppEigen", "RCurl", "rJava", "rmarkdown", "RMySQL", "RODBC", "rpart.plot", "RSocrata", "rstudioapi", "RWeka", "RWekajars", "spam", "SparseM", "TeachingDemos", "timeDate", "tis", "tm", "tree", "tseries", "TTR", "UsingR", "XML", "xtable", "zoo"))
library(fars)
install.packages("qpdf")
library(fars)
library(fars)
Sys.which(Sys.getenv("R_QPDF", "qpdf"))
Sys.getenv("PATH")
install.packages("qpdf")
RVersion()
R.Version()
install.packages("qpdf")
getwd()
library(fars)
.libPaths
.libPaths()
R.Version()
.libPaths()
Sys.getenv("PATH")
grep('3.1',Sys.getenv("PATH"))
grep('win-library',Sys.getenv("PATH"))
R.home()
.Library
.Library.site
Sys.getenv("R_LIBS")
Sys.getenv("R_LIBS_USER")
.libPaths
.libPaths()
.libPaths()
Sys.getenv("R_LIBS_USER")
Sys.getenv("R_LIBS")
.libPaths(.libPaths())
.libPaths()
Sys.setenv(R_LIBS_USER = "C:/Program Files/R/R-3.1.2/library")
.Library
.Library.site
.libPaths()
.libPaths()[2]
.libPaths(.libPaths()[2])
.libPaths()
.libPaths()
.libPaths(.libPaths()[2])
.libPaths()
.libPaths()
install.packages("qpdf")
use_vignette()
library(fars)
install.packages("qpdf")
use_vignettes()
library(devtools)
use_vignette()
use_vignette("fars")
check_doc()
check_man()
library(rmakrdown)
library(rmarkdown)
library(fars)
library(fars)
library(fars)
Sys.getenv("PATH")
library(fars)
devtools::load_all(".")
library(fars)
use_travis
use_travis()
library(devtools)
use_travis()
library(fars)
library(fars)
library(fars)
document()
use_vignette()
use_vignette("fars")
library(fars)
