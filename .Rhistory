select(Survived,Pclass,Age,Sex)  %>%
filter(!is.na(Age))  %>%
mutate(agecat=cut(Age,c(0,14,50,200),labels=c('Under 15','15 to 50','Over 50'))),10)
titanic_3 <- titanic %>%
select(Survived, Pclass, Age, Sex) %>%
filter(!is.na(Age)) %>%
mutate(agecat=cut(Age,c(0,14,50,200),labels=c('Under 15','15 to 50','Over 50')))
titanic_3
max(titanic$Age)
summary(titanic$Age)
titanic_3 <- titanic %>%
select(Survived, Pclass, Age, Sex) %>%
filter(!is.na(Age)) %>%
mutate(agecat=cut(Age,c(0,14,50,80),labels=c('Under 15','15 to 50','Over 50')))
titanic_3
submit()
str(titanic_3)
str(titanic_2)
levels(titanic_3$agecat)
titanic_3 <- titanic %>%
select(Survived, Pclass, Age, Sex) %>%
filter(!is.na(Age)) %>%
mutate(agecat=cut(Age,c(0,14,50,),labels=c('Under 15','15 to 50','Over 50')))
titanic_3 <- titanic %>%
select(Survived, Pclass, Age, Sex) %>%
filter(!is.na(Age)) %>%
mutate(agecat=cut(Age,c(0,14,50,99),labels=c('Under 15','15 to 50','Over 50')))
titanic_3 <- titanic %>%
select(Survived, Pclass, Age, Sex) %>%
filter(!is.na(Age)) %>%
mutate(agecat=cut(Age,c(0,15,50,99),labels=c('Under 15','15 to 50','Over 50'),include.lowest=TRUE))
titanic_3
titanic_3 <- titanic %>%
select(Survived, Pclass, Age, Sex) %>%
filter(!is.na(Age)) %>%
mutate(agecat=cut(Age,c(0,15,51,99),labels=c('Under 15','15 to 50','Over 50'),right=FALSE))
titanic_3
submit()
head(titanic)
titanic_4 <- titanic %>%
select(Survived, Pclass, Age, Sex) %>%
filter(!is.na(Age)) %>%
mutate(agecat = cut(Age, breaks = c(0, 14.99, 50, 150),
include.lowest = TRUE,
labels = c("Under 15", "15 to 50",
"Over 50"))) %>%
group_by(PClass, agecat, Sex) %>%
summarize(N=n(), survivors=sum(Survived), perc_survived=survivors/N)
titanic_4 <- titanic %>%
select(Survived, Pclass, Age, Sex) %>%
filter(!is.na(Age)) %>%
mutate(agecat = cut(Age, breaks = c(0, 14.99, 50, 150),
include.lowest = TRUE,
labels = c("Under 15", "15 to 50",
"Over 50"))) %>%
group_by(Pclass, agecat, Sex) %>%
summarize(N=n(), survivors=sum(Survived), perc_survived=survivors/N)
titanic_4
titanic_4 <- titanic %>%
select(Survived, Pclass, Age, Sex) %>%
filter(!is.na(Age)) %>%
mutate(agecat = cut(Age, breaks = c(0, 14.99, 50, 150),
include.lowest = TRUE,
labels = c("Under 15", "15 to 50",
"Over 50"))) %>%
group_by(Pclass, agecat, Sex) %>%
summarize(N=n(), survivors=sum(Survived), perc_survived=(survivors/N)*100)
titanic_4
submit()
x <- "Hello WOrld!"
x <- "Hello World!"
x
paste("Square","Circle","Triangle")
paste("Square","Circle","Triangle",sep="+")
paste0("Square","Circle","Triangle")
shapes <- c("Square","Circle","Triangle")
paste("My favorite shape is a",shapes)
paste(shapes,collapse=" ")
nchar("Count Me!")
cases <- c("CAPS","low","Title")
toupper(cases)
tolower(cases)
regular_expression <- 'a'
string_to_search <- "Maryland"
grepl(regular_expression,string_to_search)
grepl("ryla","Maryland")
grepl("Marly","Maryland")
head(state.name)
grepl(".","Maryland")
grepl(".","")
grepl("a.b",c("aaa","aab","abb","acadb"))
grepl("a+","Maryland")
grepl("a*","Maryland")
grepl("x*","Maryland")
grepl("s{2}","Mississippi")
grepl("i{2,3}","Mississippi")
grepl("(iss){2}","Mississippi")
grepl("\\d","0123456789")
grepl("\\D","0123456789")
grepl("[aeiou]","rhythms")
grepl("\\.","http:jhsph.edu/")
grepl("\\.","http://www.jhsph.edu/")
grepl("^a",c("bab","aab"))
grepl("b$",c("bab","aab"))
grepl("a|b",c("abc","bcd","cde"))
start_end_vowel <- "^[aeiou]{1}.+[aeiou]{1}$"
start_end_vowel <- "^[AEIOU]{1}.+[aeiou]{1}$"
vowel_state_lgl <- grepl(start_end_vowel,state.name)
state.name[vowel_state_lgl]
grepl("[Ii]",c("Hawaii","Illinois","Kentucky"))
grep("[Ii]",c("Hawaii","Illinois","Kentucky"))
sub("[Ii]",c("Hawaii","Illinois","Kentucky"))
sub("[Ii]","1",c("Hawaii","Illinois","Kentucky"))
gsub("[Ii]","1",c("Hawaii","Illinois","Kentucky"))
two_s <- state.name[grep("ss",state.name)]
two_s
strsplit(two_s,"ss")
str_extract("Camaro Z28","[0-9]+")
str_order(c("p","e","n","g"))
library(stringr)
str_order(c("p","e","n","g"))
exit()
0
stop()
library(stringr)
quit()
setClass(c("subject","visit","room"),contains="filter")
setClass("filter",slots=list(id="numeric",visit="numeric",room="numeric",data="LongitudinalData"))
setClass("LongitudinalData",
slots = list(id="numeric",
visit = "numeric",
room = "character",
value = "numeric",
timepoint = "numeric"))
make_LD <- function(data) {
if (length(colnames(data)) & every(colnames(data) %in% c("id","visit","room","value","timepoint"))) {
new("LongitudinalData",
id = data$id,
visit = data$visit,
room = data$room,
value = data$value,
timepoint = data$timepoint)
}
stop("Column(s) missing or name mismatch")
}
setGeneric("print")
setMethod("print",
c(x = "LongitudinalData"),
function(x) {
paste("Longitudinal dataset with",length(unique(x@id)),"subjects")
})
setClass("filter",slots=list(id="numeric",visit="numeric",room="numeric",data="LongitudinalData"))
setClass(c("subject","visit","room"),contains="filter")
lapply(c("subject","visit","room"),setClass,contains="filter"))
lapply(c("subject","visit","room"),setClass,contains="filter")
lapply(.("subject","visit","room"),setClass,contains="filter")
lapply(list("subject","visit","room"),setClass,contains="filter")
setGeneric("LD_subset",function(data,index) {
standardGeneric("LD_subset")
})
setMethod("LD_subset",
c(data="LongitudinalData",index="logical"),
function(data,index){
output <- new("LongitudinalData",
id=data@id[index],
visit=data@visit[index],
room=data@room[index],
value=data@value[index],
timepoint=data@timepoint[index])
return(output)
})
setGeneric("subject",function(data,n) {
standardGeneric("subject")
})
room
getClassDef("room")
setClass("LD_filter",slots=list(id="numeric",visit="numeric",room="numeric",data="LongitudinalData"))
lapply(list("subject","visit","room"),setClass,contains="LD_filter")
cwd <- getwd()
cwd
cwd <- getwd()
setwd("Class/Advanced R/")
## Read in the data
library(readr)
library(magrittr)
source("oop_code.R")
## Load any other packages that you may need to execute your code
library(dplyr)
library(tidyr)
library(purrr)
data <- read_csv("data/MIE.csv")
x <- make_LD(data)
print(class(x))
print(x)
## Subject 10 doesn't exist
out <- subject(x, 10)
print(out)
out <- subject(x, 14)
print(out)
out <- subject(x, 54) %>% summary
print(out)
out <- subject(x, 14) %>% summary
print(out)
out <- subject(x, 44) %>% visit(0) %>% room("bedroom")
print(out)
## Show a summary of the pollutant values
out <- subject(x, 44) %>% visit(0) %>% room("bedroom") %>% summary
print(out)
out <- subject(x, 44) %>% visit(1) %>% room("living room") %>% summary
print(out)
setwd(cwd)
data <- read_csv("data/MIE.csv")
cwd <- getwd()
setwd("Class/Advanced R/")
library(readr)
library(magrittr)
source("oop_code.R")
## Load any other packages that you may need to execute your code
library(dplyr)
library(tidyr)
library(purrr)
data <- read_csv("data/MIE.csv")
x <- make_LD(data)
class(data)
colnames(data)
source("oop_code.R")
x <- make_LD(data)
source("oop_code.R")
length(colnames(data))
every(colnames(data) %in% c("id","visit","room","value","timepoint"))
colnames(data) %in% c("id","visit","room","value","timepoint")
source("oop_code.R")
x <- make_LD(data)
colnames(data)
new("LongitudinalData",
id = data$id,
visit = data$visit,
room = data$room,
value = data$value,
timepoint = data$timepoint)
if (length(colnames(data)) & sum(colnames(data) %in% c("id","visit","room","value","timepoint") == 5)) {
new("LongitudinalData",
id = data$id,
visit = data$visit,
room = data$room,
value = data$value,
timepoint = data$timepoint)
}
else stop("Column(s) missing or name mismatch")
source("oop_code.R")
x <- make_LD(data)
length(colnames(data)) & sum(colnames(data) %in% c("id","visit","room","value","timepoint") == 5)
length(colnames(data))
source("oop_code.R")
x <- make_LD(data)
length(colnames(data)) == 5 & sum(colnames(data) %in% c("id","visit","room","value","timepoint") == 5)
sum(colnames(data) %in% c("id","visit","room","value","timepoint") == 5)
length(colnames(data)) == 5 & sum(colnames(data) %in% c("id","visit","room","value","timepoint")) == 5)
length(colnames(data)) == 5 & sum(colnames(data) %in% c("id","visit","room","value","timepoint") == 5)
sum(colnames(data) %in% c("id","visit","room","value","timepoint") == 5)
sum(colnames(data) %in% c("id","visit","room","value","timepoint")) == 5)
sum(colnames(data) %in% c("id","visit","room","value","timepoint")) == 5
length(colnames(data)) == 5 & sum(colnames(data) %in% c("id","visit","room","value","timepoint")) == 5
source("oop_code.R")
x <- make_LD(data)
print(class(x))
print(x)
## Subject 10 doesn't exist
out <- subject(x, 10)
print(out)
out <- subject(x, 14)
print(out)
out <- subject(x, 54) %>% summary
print(out)
out <- subject(x, 14) %>% summary
print(out)
out <- subject(x, 44) %>% visit(0) %>% room("bedroom")
print(out)
## Show a summary of the pollutant values
out <- subject(x, 44) %>% visit(0) %>% room("bedroom") %>% summary
print(out)
out <- subject(x, 44) %>% visit(1) %>% room("living room") %>% summary
print(out)
setwd(cwd)
setClass("subject",slots=list(id="numeric",data="LongitudinalData"))
setClass("visit",slots=list(id="numeric",visit="numeric",data="LongitudinalData"))
setClass("room",slots=list(id="numeric",visit="numeric",room="character",data="LongitudinalData"))
setGeneric("subject",function(data,n) {
standardGeneric("subject")
})
setMethod("subject",
c(data="LongitudinalData",n="numeric"),
function(data,n){
index <- data@id == n
if (any(index)) new("subject",id=n,data=LD_subset(data,index))
})
# Generic Function for Extracting Visit Specific Information
# Returns object of class 'visit'
setGeneric("visit",function(subj,n) {
standardGeneric("visit")
})
setMethod("visit",
c(subj="subject",n="numeric"),
function(subj,n){
index <- subj@data@visit == n
if (any(index)) new("visit",id=subj@id,visit=n,data=LD_subset(subj@data,index))
})
# Generic Function for Extracting Room Specific Information
# Returns object of class 'room'
setGeneric("room",function(vis,x) {
standardGeneric("room")
})
setMethod("room",
c(vis="visit",x="character"),
function(vis,x){
index <- vis@data@room == x
if (any(index)) new("room",id=vis@id,visit=vis@visit,room=x,data=LD_subset(vis@data,index))
})
subj
subject(x, 44) %>% visit(0)
subject(x, 44)
s <- subject(x,44)
s
str(s)
s@data@visit
s@data@visit == 0
subject(x, 44) %>% visit(0)
visit(s,0)
setGeneric("visit",function(subj,n) {
standardGeneric("visit")
})
setMethod("visit",
c(subj="subject",n="numeric"),
function(subj,n){
index <- subj@data@visit == n
if (any(index)) new("visit",id=subj@id,visit=n,data=LD_subset(subj@data,index))
})
visit(s,0)
isS4(visit)
showMethods(visit)
cwd <- getwd()
setwd("Class/Advanced R/")
## Read in the data
library(readr)
library(magrittr)
source("oop_code.R")
## Load any other packages that you may need to execute your code
library(dplyr)
library(tidyr)
library(purrr)
data <- read_csv("data/MIE.csv")
x <- make_LD(data)
print(class(x))
print(x)
## Subject 10 doesn't exist
out <- subject(x, 10)
print(out)
out <- subject(x, 14)
print(out)
out <- subject(x, 54) %>% summary
print(out)
out <- subject(x, 14) %>% summary
print(out)
out <- subject(x, 44) %>% visit(0) %>% room("bedroom")
print(out)
## Show a summary of the pollutant values
out <- subject(x, 44) %>% visit(0) %>% room("bedroom") %>% summary
print(out)
out <- subject(x, 44) %>% visit(1) %>% room("living room") %>% summary
print(out)
setwd(cwd)
cwd <- getwd()
setwd("Class/Advanced R/")
## Read in the data
library(readr)
library(magrittr)
source("oop_code.R")
## Load any other packages that you may need to execute your code
library(dplyr)
library(tidyr)
library(purrr)
sink("oop_output.txt")
data <- read_csv("data/MIE.csv")
x <- make_LD(data)
print(class(x))
print(x)
## Subject 10 doesn't exist
out <- subject(x, 10)
print(out)
out <- subject(x, 14)
print(out)
out <- subject(x, 54) %>% summary
print(out)
out <- subject(x, 14) %>% summary
print(out)
out <- subject(x, 44) %>% visit(0) %>% room("bedroom")
print(out)
## Show a summary of the pollutant values
out <- subject(x, 44) %>% visit(0) %>% room("bedroom") %>% summary
print(out)
out <- subject(x, 44) %>% visit(1) %>% room("living room") %>% summary
print(out)
sink()
setwd(cwd)
cwd <- getwd()
setwd("Class/Advanced R/")
## Read in the data
library(readr)
library(magrittr)
source("oop_code.R")
## Load any other packages that you may need to execute your code
library(dplyr)
library(tidyr)
library(purrr)
data <- read_csv("data/MIE.csv")
x <- make_LD(data)
print(class(x))
print(x)
## Subject 10 doesn't exist
out <- subject(x, 10)
print(out)
out <- subject(x, 14)
print(out)
out <- subject(x, 54) %>% summary
print(out)
out <- subject(x, 14) %>% summary
print(out)
out <- subject(x, 44) %>% visit(0) %>% room("bedroom")
print(out)
## Show a summary of the pollutant values
out <- subject(x, 44) %>% visit(0) %>% room("bedroom") %>% summary
print(out)
out <- subject(x, 44) %>% visit(1) %>% room("living room") %>% summary
print(out)
setwd(cwd)
library(purrr)
library(microbenchmark)
# Temporarily reset working directory to store output
cwd <- getwd()
setwd("Class/Advanced R/")
# Loop
Factorial_loop <- function(n) {
stopifnot(n >= 0)
if (n>0) {
factorial <- 1
for (i in n:1) {
factorial <- factorial * i
}
}
else if (n==0) factorial <- 1
factorial
}
# Reduce
Factorial_reduce <- function(n) {
stopifnot(n >= 0)
if (n>0) reduce(n:1,prod)
else if (n==0) 1
}
# Recursion
Factorial_func <- function(n) {
stopifnot(n >= 0)
if (n>0) n * Factorial_func (n-1)
else if (n==0) 1
}
# Memoization
fact_table <- integer(length=0)
Factorial_mem <- function(n) {
stopifnot(n >= 0)
if (n==0) 1
else if(!is.na(fact_table[n])){
fact_table[n]
}
else {
fact_table[n] <<- n * Factorial_mem(n - 1)
fact_table[n]
}
}
# Verify Functions Produce Same Output
# map_dbl(0:11, Factorial_loop)
# map_dbl(0:11, Factorial_reduce)
# map_dbl(0:11, Factorial_func)
# map_dbl(0:11, Factorial_mem)
# Direct output to factorial_output.txt
sink("factorial_output.txt")
# Benchmark - Single Value
cat('Benchmark - Single Value\n')
microbenchmark(map_dbl(8, Factorial_loop),
map_dbl(8, Factorial_reduce),
map_dbl(8, Factorial_func),
map_dbl(8, Factorial_mem))
# Benchmark - Range of Values
cat('\nBenchmark - Range of Values\n')
microbenchmark(map_dbl(0:30, Factorial_loop),
map_dbl(0:30, Factorial_reduce),
map_dbl(0:30, Factorial_func),
map_dbl(0:30, Factorial_mem))
sink()
setwd(cwd)
seq(0,n-1)
seq(0,4)
install.packages("Rtools")
Reduce(prod,1:5)
Reduce(prod,1:10)
Reduce(prod,1:6)
Reduce('*',1:6)
Reduce('*',1:50)
reduce(1:6,prod)
reduce(1:50,prod)
Reduce('*',1:50,init=1)
Reduce('*',0:50,init=1)
Reduce('*',1:50,init=1)
setwd("~/Class/R Packages/fars")
